for (i in 1:6){
print(paste(family[i],"drew",draw[i]))
}
print(paste("Redraw?",redraw))
family = c("Dad","Mom","Tom","John","Dave","Mike")
draw = sample(family)
redraw = ifelse(sum(family == draw)>0,"yes","no")
for (i in 1:6){
print(paste(family[i],"drew",draw[i]))
}
print(paste("Redraw?",redraw))
n=6 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial a 1 for redraw, 0 for no redraw
for (i in 1:trials){
draw = sample(family)
results[i] = ifelse(sum(family == draw)>0,1,0)
}
sum(results)/trials
n=6 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial a 1 for redraw, 0 for no redraw
for (i in 1:trials){
draw = sample(family)
results[i] = ifelse(sum(family == draw)>0,1,0)
}
sum(results)/trials
n=6 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
table(attempts)
n=6 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
table(results)
sum(results)/trials
n=60 #size of family
n=60 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
table(results)
sum(results)/trials
exp(1)
n=16 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
table(results)
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
family_size = seq(2,100,by=2)
prob_redraw = c()
exp_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
exp_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,exp_draws)
ggplot()+
geom_line(x=family_size,y=prob_redraw)
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
family_size = seq(2,100,by=2)
prob_redraw = c()
exp_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
exp_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,exp_draws)
ggplot()+
geom_line(x=family_size,y=prob_redraw)
library(tidyverse)
ggplot()+
geom_line(x=family_size,y=prob_redraw)
ggplot(df)+
geom_line(x=family_size,y=prob_redraw)
ggplot(df)+
geom_line(aes(x=family_size,y=prob_redraw))
ggplot(df)+
geom_point(aes(x=family_size,y=prob_redraw))
ggplot(df)+
geom_point(aes(x=family_size,y=exp_draws))
v=hat_draw_sim(6)
v[1]
v[2]
v[15]
v=hat_draw_sim(5)
v
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = seq(5,40,by=5)
prob_redraw = c()
exp_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
exp_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,exp_draws)
view(df)
library(kableExtra)
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,15,20,25,30,40,50,100)
prob_redraw = c()
exp_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
exp_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,exp_draws)
kbl(df) %>% kable_styling()
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,15,20,25,30,40,50,100)
prob_redraw = c()
exp_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,15,20,25,30,40,50,100)
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
kbl(df) %>% kable_styling(full_width=FALSE)
n=2 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial a 1 for redraw, 0 for no redraw
for (i in 1:trials){
draw = sample(family)
results[i] = ifelse(sum(family == draw)>0,1,0)
}
sum(results)/trials
n=2 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial a 1 for redraw, 0 for no redraw
for (i in 1:trials){
draw = sample(family)
results[i] = ifelse(sum(family == draw)>0,1,0)
}
sum(results)/trials
n=6 #size of family
n=2 #size of family
family = 1:n #we use numbers, to protect the innocent
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
table(results)
sum(results)/trials
sum(results>1)/trials
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,20,50,100)
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
kbl(df) %>% kable_styling(full_width=FALSE)
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=10000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,20,50,100)
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,20,50,100)
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(n)
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
kbl(df) %>% kable_styling(full_width=FALSE)
## run simulation for various family sizes
family_size = c(2,3,4,5,6,10,20,50,100)
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(family_size[i])
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
ggplot(df)+
geom_line(aes(x=family_size,y=prob_redraw),col="red")+
geom_line(aes(x=family_size,y=expected_draws),col="blue")
## run simulation for various family sizes
family_size = 2:50
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(family_size[i])
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
ggplot(df)+
geom_line(aes(x=family_size,y=prob_redraw),col="red")+
geom_line(aes(x=family_size,y=expected_draws),col="blue")
## run simulation for various family sizes
family_size = 2:50
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(family_size[i])
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
ggplot(df)+
geom_line(aes(x=family_size,y=expected_draws),col="blue")
hat_draw_sim <- function(n){
# outputs a vector with two values based on 10000 trials:
# first value: probability of having to redraw
# second value: expected number of draws needed
family = 1:n
trials=20000
results = c() #record for each trial how many attempts it took to get a good draw
for (i in 1:trials){
attempts = 0
draw_again = TRUE
while (draw_again){
attempts = attempts+1
draw = sample(family)
draw_again = ifelse(sum(family == draw)>0,TRUE,FALSE)
}
results[i] = attempts
}
return(c(sum(results>1)/trials,sum(results)/trials))
}
## run simulation for various family sizes
family_size = 2:20
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(family_size[i])
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
ggplot(df)+
geom_line(aes(x=family_size,y=expected_draws),col="blue")
## run simulation for various family sizes
family_size = 2:30
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(family_size[i])
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
ggplot(df)+
geom_line(aes(x=family_size,y=expected_draws),col="blue")
## run simulation for various family sizes
family_size = 2:30
prob_redraw = c()
expected_draws = c()
for (i in 1:length(family_size)){
v=hat_draw_sim(family_size[i])
prob_redraw[i] = v[1]
expected_draws[i] = v[2]
}
df = data.frame(family_size,prob_redraw,expected_draws)
ggplot(df)+
geom_line(aes(x=family_size,y=expected_draws),col="blue")
ggplot(df)+
geom_line(aes(x=family_size,y=prob_redraw),col="blue")
x = c(2,2,2,3,4,5,5,6)
table(x)
table(x)['2']
table(x)['2'][2]
table(x)[2]
1/exp(e)
1/exp(1)
1-1/exp(1)
exp(1)
1/.37
1/.368
